{"version":3,"sources":["webpack:///./src/components/layout/layout.css.js","webpack:///./src/components/layout/index.js","webpack:///./src/pages/skills.js"],"names":["styles","layout","pageContainer","Layout","title","children","bgClassName","fixedMenuPosition","className","query","render","site","siteMetadata","siteTitle","siteKeywords","siteDescription","Helmet","meta","name","content","charSet","lang","css","numPoints","duration","delayPointsMax","delayPerPath","data","transitionStatus","allSkills","allMarkdownRemark","edges","reduce","mySkills","skills","node","frontmatter","currentSkils","acumSkills","currentSkill","find","push","type","description"],"mappings":"wLAEA,IAaeA,EAbA,CACbC,OAAO,6EAKPC,cAAc,yE,YCqEDC,EAtEA,SAAC,GAKT,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,YAEI,IADJC,yBACI,SACJ,OACE,mBAAKC,UAAS,mBAAoBF,GAAe,UAC/C,YAAC,cAAD,CACEG,MAAK,aAYLC,OAAQ,oBACNC,KACEC,aAAuBC,EAFnB,EAEYT,MAAkBU,EAF9B,EAE8BA,aAAcC,EAF5C,EAE4CA,gBAF5C,OAKN,8BACE,YAACC,EAAA,EAAD,CACEZ,MAAOA,GAASS,EAChBI,KAAM,CACJ,CACEC,KAAM,cACNC,QAASJ,GAEX,CACEG,KAAM,WACNC,QAASL,GAEX,CAAEM,QAAS,WAGb,oBAAMC,KAAK,QAEb,mBAAKb,UAAU,gBACb,mBAAKc,IAAKtB,EAAOC,QACf,YAAC,IAAD,CACEK,YAAaA,EACbiB,UAAW,GACXC,SAAU,IACVC,eAAgB,IAChBC,aAAc,IACdnB,kBAAmBA,KAGvB,mBAAKe,IAAKtB,EAAOE,eAAgBG,U,YCvDhC,sBAAiC,IAA9BsB,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAClBC,EAAY,GA4BhB,QA3BMF,GAAQ,IAAIG,mBAAqB,IAAIC,QAEzCF,EAAYF,EAAKG,kBAAkBC,MAAMC,QACvC,SACEC,EADF,GAOM,IAHeC,EAGhB,EAJDC,KACEC,YAAeF,OAInB,GAAIA,EAAQ,CACV,IAAMG,EAAeH,EAAOF,QAAO,SAACM,EAAYC,GAK9C,OAHKN,EAASO,MAAK,qBAAGpC,QAAsBmC,EAAanC,UACvDkC,EAAWG,KAAKF,GAEXD,IACN,IACH,MAAM,GAAN,mBAAWL,GAAX,YAAwBI,IAE1B,OAAOJ,IAET,KAKF,YAAC,EAAD,CAAQ7B,MAAK,SAAYE,YAAW,QAAWC,mBAAmB,GAChE,YAACS,EAAA,EAAD,KACE,oCAEF,YAAC,IAAD,CACEkB,OAAQL,EACRa,KAAK,aACLtC,MAAM,SACNuC,YAAY,6DACZf,iBAAkBA","file":"component---src-pages-skills-js-bddeefd9c8fd135d5f1d.js","sourcesContent":["import { css } from \"@emotion/core\"\r\n\r\nconst styles = {\r\n  layout: css`\r\n    margin-bottom: 1.45rem;\r\n    position: relative;\r\n    z-index: 4;\r\n  `,\r\n  pageContainer: css`\r\n    margin: 0px auto;\r\n    padding: 1vmin 4em 0;\r\n    flex: auto;\r\n  `,\r\n}\r\n\r\nexport default styles\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Helmet from \"react-helmet\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\nimport styles from \"./layout.css\"\r\nimport Menu from \"../menu\"\r\n\r\nconst Layout = ({\r\n  title,\r\n  children,\r\n  bgClassName,\r\n  fixedMenuPosition = false,\r\n}) => {\r\n  return (\r\n    <div className={`layout-wrapper ${bgClassName || \"white\"}`}>\r\n      <StaticQuery\r\n        query={graphql`\r\n          {\r\n            site {\r\n              siteMetadata {\r\n                title\r\n                email\r\n                siteKeywords\r\n                siteDescription\r\n              }\r\n            }\r\n          }\r\n        `}\r\n        render={({\r\n          site: {\r\n            siteMetadata: { title: siteTitle, siteKeywords, siteDescription },\r\n          },\r\n        }) => (\r\n          <>\r\n            <Helmet\r\n              title={title || siteTitle}\r\n              meta={[\r\n                {\r\n                  name: \"description\",\r\n                  content: siteDescription,\r\n                },\r\n                {\r\n                  name: \"keywords\",\r\n                  content: siteKeywords,\r\n                },\r\n                { charSet: \"utf-8\" },\r\n              ]}\r\n            >\r\n              <html lang=\"en\" />\r\n            </Helmet>\r\n            <div className=\"layout-inner\">\r\n              <div css={styles.layout}>\r\n                <Menu\r\n                  bgClassName={bgClassName}\r\n                  numPoints={18}\r\n                  duration={600}\r\n                  delayPointsMax={300}\r\n                  delayPerPath={100}\r\n                  fixedMenuPosition={fixedMenuPosition}\r\n                />\r\n              </div>\r\n              <div css={styles.pageContainer}>{children}</div>\r\n            </div>\r\n          </>\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string,\r\n  bgClassName: PropTypes.string,\r\n  fixedMenuPosition: PropTypes.bool,\r\n}\r\n\r\nexport default Layout\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport Layout from \"../components/layout\"\r\nimport Skill from \"../components/skill\"\r\n\r\nexport default ({ data, transitionStatus }) => {\r\n  let allSkills = []\r\n  if (((data || {}).allMarkdownRemark || {}).edges) {\r\n    // Select non duplicated skills from all jobs\r\n    allSkills = data.allMarkdownRemark.edges.reduce(\r\n      (\r\n        mySkills,\r\n        {\r\n          node: {\r\n            frontmatter: { skills },\r\n          },\r\n        }\r\n      ) => {\r\n        if (skills) {\r\n          const currentSkils = skills.reduce((acumSkills, currentSkill) => {\r\n            // If the skill don't exists in array add it\r\n            if (!mySkills.find(({ title }) => title === currentSkill.title)) {\r\n              acumSkills.push(currentSkill)\r\n            }\r\n            return acumSkills\r\n          }, [])\r\n          return [...mySkills, ...currentSkils]\r\n        }\r\n        return mySkills\r\n      },\r\n      []\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Layout title={`Skills`} bgClassName={`skill`} fixedMenuPosition={true}>\r\n      <Helmet>\r\n        <title>Skills</title>\r\n      </Helmet>\r\n      <Skill\r\n        skills={allSkills}\r\n        type=\"scrollable\"\r\n        title=\"Skills\"\r\n        description=\"Familiar with these technologies after my developer career\"\r\n        transitionStatus={transitionStatus}\r\n      />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: { fields: { slug: { regex: \"/experience/\" } } }\r\n      sort: { fields: [frontmatter___dateFrom], order: DESC }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            skills {\r\n              title\r\n              image {\r\n                childImageSharp {\r\n                  fluid(maxWidth: 300) {\r\n                    ...GatsbyImageSharpFluid\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}